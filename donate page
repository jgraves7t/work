<script type="text/javascript" id="bloomerangForm192512"></script>
<pre><script type="text/javascript">
    var insertForm192512 = function() {
        var html192512 = '<style text=\'text/css\'>' + 
'.donation-form label{color: #404040;' + 
'                display: block;}' + 
'' + 
'.donation-form label.error,' + 
'                     .donation-form #card-errors{color: #900;}' + 
'' + 
'.donation-form label.error{display: inline-block;' + 
'                padding: 0 10px;}' + 
'' + 
'.donation-form section{padding: 5px;}' + 
'' + 
'.donation-form .field{padding: 4px 0;}' + 
'' + 
'.donation-form .field .required-star{color: #aa0000; ' + 
'                display: inline-block; ' + 
'                margin-left: 5px;}' + 
'' + 
'.donation-form .field .checkboxes{max-width:275px;' + 
'                border: 1px solid #A9A9A9;' + 
'                -webkit-transition: all .3s ease-out;' + 
'                -moz-transition: all .3s ease-out;' + 
'                transition: all .3s ease-out;}' + 
'' + 
'.donation-form .field .checkbox{display:block;' + 
'                position:relative;' + 
'                -moz-box-sizing:border-box;' + 
'                box-sizing:border-box;' + 
'                height:30px;' + 
'                line-height:26px;' + 
'                padding:2px 28px 2px 8px;' + 
'                border-bottom:1px solid rgba(0,0,0,0.1);' + 
'                color:#404040;  ' + 
'                overflow:hidden;' + 
'                text-decoration:none; }' + 
'' + 
'.donation-form .field .checkbox input{opacity:0.01;' + 
'                position:absolute;' + 
'                left:-50px;  ' + 
'                z-index:-5;}' + 
'' + 
'.donation-form .field .checkbox:last-child{border-bottom:none;}' + 
'' + 
'.donation-form .field .checkbox.selected{background: rgb(50, 142, 253);' + 
'                color:#fff; }' + 
'' + 
'.donation-form .field .checkbox.selected:before{color:#fff;' + 
'                line-height:30px;' + 
'                position:absolute;' + 
'                right:10px; }' + 
'' + 
'.donation-form .field input,' + 
'                     .donation-form .field select,' + 
'                     .donation-form .field textarea,' + 
'                     .donation-form #card-element{padding: 4px; ' + 
'                max-width: 275px;' + 
'                width: 96%}' + 
'' + 
'.donation-form .field .StripeElement{background-color: white;' + 
'                background-color: -moz-field;' + 
'                border: 1px solid darkgray;' + 
'                display: inline-block;}' + 
'' + 
'.donation-form .field textarea.international{height: 120px;}' + 
'' + 
'.donation-form .field select{box-sizing: content-box;}' + 
'' + 
'.donation-form .section.recurring{padding-left: 30px}' + 
'' + 
'.donation-form .field.radio label,' + 
'                     .donation-form .field.checkbox label{display: inline-block;}' + 
'' + 
'.donation-form .field.radio input,' + 
'                     .donation-form .field.checkbox input{width: auto;' + 
'                margin-left:0;}' + 
'' + 
'.donation-form .section.consent .field.checkbox:not(.consent-all){margin-left: 20px;}' + 
'' + 
'.donation-form #cardExpirationMonth,' + 
'                     .donation-form #cardExpirationYear{width: 85px;}' + 
'' + 
'.donation-form #security-code{width: 55px;}' + 
'' + 
'.donation-form .field .sidenote{color: #999;' + 
'                font-size: 10px; }' + 
'' + 
'.donation-form .field.other-option,' + 
'                     .donation-form .field.other-amount,' + 
'                     .donation-form .field.cardExpirationMonth,' + 
'                     .donation-form .field.cardExpirationYear{display: inline-block;}' + 
'' + 
'.donation-form .field.other-amount{padding-left: 6px;}' + 
'' + 
'.donation-form .field.cardExpirationMonth{padding-right: 20px;}' + 
'' + 
'.donation-form #other-amount{width: 65px;}' + 
'' + 
'.donation-form #frequency{width: 85px;}' + 
'' + 
'.donation-form #start-date{width: 150px;}' + 
'' + 
'.donation-form .errors{border: 1px solid #900;' + 
'                color: #900;  ' + 
'                padding: 10px;}' + 
'' + 
'.donation-form .radio label.error{display: inline-block;' + 
'                padding-right: 86%;  ' + 
'                float: right;}' + 
'' + 
'.donation-form .hidden{display: none;}' + 
'' + 
'.btn-group .btn-submit-donation{padding: 4px 10px;}' + 
'' + 
'iframe#spreedly-iframe[style=\'visibility: hidden;\']{display: none;}' + 
'' + 
'input, select, textarea, button{font-family: inherit;}' + 
'' + 
'#spreedly-modal-overlay[style="visibility:hidden"]{display: none;}' + 
'' + 
'</style>' + 
'' + 
'<div id="donation-form-container">' + 
'  <form id="donation-form" class="donation-form" method="post" onsubmit="event.preventDefault(); collectPayment();">' + 
'    <div class="errors hidden"></div>' + 
'    <div class="section donation">' + 
'      <h3>Donation</h3>' + 
'      <div class="field radio 194560 required" >' + 
'<label for="194560"><input id="194560" name="donation-level" class="required" type="radio" value="10.000000" maxlength="255"></input><span class="label">$10.00 - Pays for a night of shelter</span></label>' + 
'</div>' + 
'<div class="field radio 194561 required" >' + 
'<label for="194561"><input id="194561" name="donation-level" class="required" type="radio" value="30.000000" maxlength="255"></input><span class="label">$30.00 - Pays for a monthly bus pass</span></label>' + 
'</div>' + 
'<div class="field radio 194562 required" >' + 
'<label for="194562"><input id="194562" name="donation-level" class="required" type="radio" value="50.000000" maxlength="255"></input><span class="label">$50.00 - Pays for a rental application fee</span></label>' + 
'</div>' + 
'<div class="field radio 194563 required" >' + 
'<label for="194563"><input id="194563" name="donation-level" class="required" type="radio" value="100.000000" maxlength="255"></input><span class="label">$100.00 - Pays the utilities for two participants</span></label>' + 
'</div>' + 
'<div class="field radio other-option required" >' + 
'<label for="other-option"><input id="other-option" name="donation-level" class="required" type="radio" maxlength="255"></input><span class="label">Other</span></label>' + 
'</div>' + 
'<div class="field text other-amount" >' + 
'<input id="other-amount" name="other-amount" class="otherAmount" type="text" placeholder="$0.00"></input>' + 
'</div>' + 
'' + 
'</div>' + 
'    <div class="section recurring">' + 
'      <div class="field checkbox recurring" >' + 
'<label for="recurring"><input id="recurring" name="recurring" type="checkbox" maxlength="255"></input><span class="label">Show my support by making this a recurring donation</span></label>' + 
'</div>' + 
'<div class="field  frequency required" style="display: none">' + 
'<label for="frequency">Frequency<span class="required-star">*</span></label>' + 
'<select id="frequency" name="frequency" class="required"><option value=""></option>' + 
'<option value="Weekly">Weekly</option>' + 
'<option value="Monthly" selected>Monthly</option>' + 
'<option value="Quarterly">Quarterly</option>' + 
'<option value="Yearly">Yearly</option>' + 
'</select>' + 
'</div>' + 
'<div class="field date start-date required" style="display: none">' + 
'<label for="start-date"><span class="label">Start Date</span><span class="required-star">*</span></label>' + 
'<input id="start-date" name="start-date" class="validDate required" type="date" placeholder="mm/dd/yyyy"></input>' + 
'</div>' + 
'' + 
'</div>' + 
'    ' + 
'    <div class="section contact">' + 
'      <h3>Contact Information</h3>' + 
'      <div class="field text first-name required" >' + 
'<label for="first-name"><span class="label">First Name</span><span class="required-star">*</span></label>' + 
'<input id="first-name" name="first-name" class="required" type="text"></input>' + 
'</div>' + 
'<div class="field text last-name required" >' + 
'<label for="last-name"><span class="label">Last Name</span><span class="required-star">*</span></label>' + 
'<input id="last-name" name="last-name" class="required" type="text"></input>' + 
'</div>' + 
'<div class="field email email-address required" >' + 
'<label for="email-address"><span class="label">Email</span><span class="required-star">*</span></label>' + 
'<input id="email-address" name="email-address" class="email required" type="email" placeholder="someone@website.com"></input>' + 
'</div>' + 
'<div class="field tel phone-number" >' + 
'<label for="phone-number"><span class="label">Phone</span></label>' + 
'<input id="phone-number" name="phone-number" class="phoneUS" type="tel"></input>' + 
'</div>' + 
'' + 
'</div>' + 
'    <div class="section billing-address">' + 
'      <h3>Billing Address</h3>' + 
'      <div class="field  country required" >' + 
'<label for="country">Country<span class="required-star">*</span></label>' + 
'<select id="country" name="country" class="required"><option value=""></option>' + 
'<option value="CA">Canada</option>' + 
'<option value="US" selected>United States</option>' + 
'</select>' + 
'</div>' + 
'<div class="field  street-address required" >' + 
'<label for="street-address"><span class="label">Address</span><span class="required-star">*</span></label>' + 
'<textarea id="street-address" name="street-address" class="required"></textarea>' + 
'</div>' + 
'<div class="field text city required" >' + 
'<label for="city"><span class="label">City</span><span class="required-star">*</span></label>' + 
'<input id="city" name="city" class="required" type="text" data-us-label="City" data-bm-label="Parish"></input>' + 
'</div>' + 
'<div class="field  state required" >' + 
'<label for="state">State<span class="required-star">*</span></label>' + 
'<select id="state" name="state" class="required"><option value=""></option>' + 
'<option value="AL">Alabama</option>' + 
'<option value="AK">Alaska</option>' + 
'<option value="AS">American Samoa</option>' + 
'<option value="AZ">Arizona</option>' + 
'<option value="AR">Arkansas</option>' + 
'<option value="AE">Armed Forces Africa, Canada, Europe, Middle East</option>' + 
'<option value="AA">Armed Forces Americas (except Canada)</option>' + 
'<option value="AP">Armed Forces Pacific</option>' + 
'<option value="CA">California</option>' + 
'<option value="CO">Colorado</option>' + 
'<option value="CT">Connecticut</option>' + 
'<option value="DE">Delaware</option>' + 
'<option value="DC">District of Columbia</option>' + 
'<option value="FL">Florida</option>' + 
'<option value="GA">Georgia</option>' + 
'<option value="GU">Guam</option>' + 
'<option value="HI">Hawaii</option>' + 
'<option value="ID">Idaho</option>' + 
'<option value="IL">Illinois</option>' + 
'<option value="IN">Indiana</option>' + 
'<option value="IA">Iowa</option>' + 
'<option value="KS">Kansas</option>' + 
'<option value="KY">Kentucky</option>' + 
'<option value="LA">Louisiana</option>' + 
'<option value="ME">Maine</option>' + 
'<option value="MD">Maryland</option>' + 
'<option value="MA">Massachusetts</option>' + 
'<option value="MI">Michigan</option>' + 
'<option value="MN">Minnesota</option>' + 
'<option value="MS">Mississippi</option>' + 
'<option value="MO">Missouri</option>' + 
'<option value="MT">Montana</option>' + 
'<option value="NE">Nebraska</option>' + 
'<option value="NV">Nevada</option>' + 
'<option value="NH">New Hampshire</option>' + 
'<option value="NJ">New Jersey</option>' + 
'<option value="NM">New Mexico</option>' + 
'<option value="NY">New York</option>' + 
'<option value="NC">North Carolina</option>' + 
'<option value="ND">North Dakota</option>' + 
'<option value="OH">Ohio</option>' + 
'<option value="OK">Oklahoma</option>' + 
'<option value="OR">Oregon</option>' + 
'<option value="PA">Pennsylvania</option>' + 
'<option value="PR">Puerto Rico</option>' + 
'<option value="RI">Rhode Island</option>' + 
'<option value="SC">South Carolina</option>' + 
'<option value="SD">South Dakota</option>' + 
'<option value="TN">Tennessee</option>' + 
'<option value="TX">Texas</option>' + 
'<option value="VI">US Virgin Islands</option>' + 
'<option value="UT">Utah</option>' + 
'<option value="VT">Vermont</option>' + 
'<option value="VA">Virginia</option>' + 
'<option value="WA">Washington</option>' + 
'<option value="WV">West Virginia</option>' + 
'<option value="WI">Wisconsin</option>' + 
'<option value="WY">Wyoming</option>' + 
'</select>' + 
'</div>' + 
'<div class="field  province required" style="display: none">' + 
'<label for="province">Province<span class="required-star">*</span></label>' + 
'<select id="province" name="province" class="required"><option value=""></option>' + 
'<option value="AB">Alberta</option>' + 
'<option value="BC">British Columbia</option>' + 
'<option value="MB">Manitoba</option>' + 
'<option value="NB">New Brunswick</option>' + 
'<option value="NL">Newfoundland and Labrador</option>' + 
'<option value="NT">Northwest Territories</option>' + 
'<option value="NS">Nova Scotia</option>' + 
'<option value="NU">Nunavut</option>' + 
'<option value="ON">Ontario</option>' + 
'<option value="PE">Prince Edward Island</option>' + 
'<option value="QC">Quebec</option>' + 
'<option value="SK">Saskatchewan</option>' + 
'<option value="YT">Yukon Territory</option>' + 
'</select>' + 
'</div>' + 
'<div class="field number zip-code required" >' + 
'<label for="zip-code"><span class="label">ZIP Code</span><span class="required-star">*</span></label>' + 
'<input id="zip-code" name="zip-code" class="zipcodeUS required" type="number" minlength="5" maxlength="10"></input>' + 
'</div>' + 
'<div class="field text postal-code required" style="display: none">' + 
'<label for="postal-code"><span class="label">Postal Code</span><span class="required-star">*</span></label>' + 
'<input id="postal-code" name="postal-code" class="required" type="text"></input>' + 
'</div>' + 
'' + 
'</div>' + 
'    <div class="section payment">' + 
'      <h3>Payment Information</h3>' + 
'      <div class="field text payment required" id="stripe-cc-fields">' + 
'<label for="card-element"><span class="label">Credit or debit card</span><span class="required-star">*</span></label>' + 
'<div id="card-element"></div><div id="card-errors" role="alert"></div></div>' + 
'' + 
'</div>' + 
'    ' + 
'    <div class="section comment">' + 
'      <div class="field text comment" >' + 
'<label for="comment"><span class="label">Comments</span></label>' + 
'<textarea id="comment" name="comment" type="text" value="Comments"></textarea>' + 
'</div>' + 
'' + 
'</div>' + 
'    <div class="section consent hidden">' + 
'      <div class="field checkbox consent-all" >' + 
'<label for="consent-all"><input id="consent-all" name="consent-all" type="checkbox" maxlength="255"></input><span class="label">I would like to receive or continue receiving updates from Humility Homes & Services, Inc.</span></label>' + 
'</div>' + 
'<div class="field checkbox consent-email" style="display: none">' + 
'<label for="consent-email"><input id="consent-email" name="consent-email" type="checkbox" checked="checked" maxlength="255"></input><span class="label">by email</span></label>' + 
'</div>' + 
'<div class="field checkbox consent-mail" style="display: none">' + 
'<label for="consent-mail"><input id="consent-mail" name="consent-mail" type="checkbox" checked="checked" maxlength="255"></input><span class="label">by postal mail</span></label>' + 
'</div>' + 
'<div class="field checkbox consent-phone" style="display: none">' + 
'<label for="consent-phone"><input id="consent-phone" name="consent-phone" type="checkbox" checked="checked" maxlength="255"></input><span class="label">by phone</span></label>' + 
'</div>' + 
'' + 
'</div>' + 
'    <div class="section true-impact">' + 
'      <h3>Increase My Impact</h3>' + 
'      <div class="field checkbox true-impact" >' + 
'<label for="true-impact"><input id="true-impact" name="true-impact" type="checkbox" maxlength="255"></input><span class="label">Yes! Add [amount] to help offset bank fees</span></label>' + 
'</div>' + 
'' + 
'</div>' + 
'    <div class="section captcha">' + 
'      <label id=\'noCaptchaResponseError\' class=\'error noCaptchaResponseError\' style=\'display: none\'>You must fill out the CAPTCHA</label><div id="captcha192512"></div>' + 
'' + 
'</div>' + 
'    <div class="btn-group">' + 
'      <input class="btn btn-submit btn-submit-donation" type="submit" value="Enter Payment" id="express-submit" disabled="true" />' + 
'    </div>' + 
'  </form>' + 
'</div>' + 
'<div id="donation-processing-container" style="display: none">' + 
'  <h2>Processing...</h2><p>Your transaction is being processed. Please do not close your browser or leave this page.</p>' + 
'</div>' + 
'' + 
'' +  '';var successHtml192512 = '<div class=\'donation-success\'>' +
                                                       '  <h2>Thank You for Your Donation!</h2>' +
                                                       '  <p>Your generous gift has been processed. We truly appreciate your continued support.</p>' + 
                                                        '   ' + 
                                                        '</div>';( function($) {if (Bloomerang.useDonationId('192512')) { 
                                Bloomerang.useProcessor('190465', 'StripeExpress', 'pk_live_iZYXFefCkt380zu63aqUIo7y');
                            } else {
                                html192512 = '<p style="color: red">Only one donation or event registration form can be used on each page.</p>';
                            }if (jQuery('#bloomerangForm192512').length) {
                        
                    if (window.ActiveXObject) { // they are using IE < 11, which doesn't support TLS 1.1
                        html192512 = '<p style="color: red">Your browser does not support the minimum security requirements for keeping your Credit Card information safe when processing payments. Please upgrade your browser or download the latest version of' + 
                        ' <a target=\'_blank\' href=\'https://www.google.com/chrome/browser/desktop/\'>Chrome</a> or <a target=\'_blank\' href=\'https://www.mozilla.org/en-US/firefox/new/\'>Firefox</a>.</p>';
                    }
                        jQuery('#bloomerangForm192512').after(html192512);
                        
                         Bloomerang.Util.requireStripe(function() {
                                        Bloomerang.Util.Stripe = Stripe('pk_live_iZYXFefCkt380zu63aqUIo7y'); 
                                        var elements = Bloomerang.Util.Stripe.elements(); 
                                     
                                        // Create an instance of the card Element.
                                        Bloomerang.Util.StripeCard = elements.create('card', {
                                          hidePostalCode: true,
                                          style: {
                                            base: {
                                              color: "#272D30",
                                              fontSize: "14px",
                                              fontFamily: "'Century Gothic', verdana, sans-serif"
                                            },
                                            invalid: {
                                              color: "#272D30"
                                            }
                                          }
                                        });
                                     
                                        // Add an instance of the card Element into the `card-element` <div>.
                                        Bloomerang.Util.StripeCard.mount('#card-element');
                                     
                                        // Handle real-time validation errors from the card Element.
                                        Bloomerang.Util.StripeCardIsValid = false;
                                        Bloomerang.Util.StripeCard.addEventListener('change', function(event) {
                                          var displayError = document.getElementById('card-errors');
                                          if (event.error) {
                                            displayError.textContent = event.error.message;
                                          } else {
                                            displayError.textContent = '';
                                          }
                                          if (event.complete) {
                                            Bloomerang.Util.StripeCardIsValid = true;
                                          } else {
                                            Bloomerang.Util.StripeCardIsValid = false;
                                          }
                                        });
                                      });

                                      jQuery(".donation-form #express-submit").val("Donate");
                                      jQuery(".registration-form #express-submit").val("Register");
                                      jQuery("#express-submit").attr("disabled", false);
                    };
                    if (Bloomerang.paymentFormLoaded) {
                                            return false;
                                        }
                                        Bloomerang.paymentFormLoaded = true;
                       window.captchaLoadCallback = function() {
                            Bloomerang.gRecaptchaLoaded = true;
                        };
                        Bloomerang.Util.load('https://www.google.com/recaptcha/api.js?onload=captchaLoadCallback&render=explicit',
                            function() { return Bloomerang.gRecaptchaLoaded; },
                            function() {
                                jQuery('.section.captcha').removeAttr('style');
                                jQuery('form.donation-form').data('captcha-id', grecaptcha.render('captcha192512', { 'sitekey' : '6LdOBXAmAAAAAEzUKnBbgx6OnY-0dAigEDI1EmYV' }));
                            },
                            true,
                            true);
                    Bloomerang.transactionFee = 0.3; Bloomerang.transactionFeeRate = 0.029; 
                                    Bloomerang.transactionFeeEft = 0.3; Bloomerang.transactionFeeRateEft = 0.01;
                    Bloomerang.useKey('pub_f12005a3-92b1-11ed-a67a-0a2536b1f545');

        Bloomerang.Util.getDonationAmount = function() {
          return Number(accounting.unformat(jQuery(".donation-form .section.donation input[name='donation-level']:checked").val() || jQuery(".donation-form #donation-amount").val()));
        };

        // Register proper callbacks for various stages/outcomes of submission
        Bloomerang.Widget.Donation.OnSubmit = function (args) {
            jQuery(".btn-submit-donation").val("Donating...").prop("disabled", true).addClass("disabled");
            var val = function (selector) { return jQuery(selector).val(); };
            var country = val(".donation-form #country");
            var state = Bloomerang.Util.getCorrectState(country, val(".donation-form #state"), val(".donation-form #province"));
            var zipCode = Bloomerang.Util.getCorrectZipCode(country, val(".donation-form #zip-code"), val(".donation-form #postal-code"));
            Bloomerang.Account
                    .individual()
                    .firstName(val(".donation-form #first-name"))
                    .middleName(val(".donation-form #middle-name"))
                    .lastName(val(".donation-form #last-name"))
                    .homeAddress(val(".donation-form #street-address"),
                                 val(".donation-form #city"),
                                 state,
                                 zipCode,
                                 country)
                    .homeEmail(val(".donation-form #email-address"))
                    .homePhone(val(".donation-form #phone-number"))
                    .applyDonationCustomFields();

            if (jQuery(".donation-form #consent-all").prop("checked")) {
              Bloomerang.Account.optedInStatus(jQuery(".donation-form #consent-email").prop("checked"),
                                               jQuery(".donation-form #consent-mail").prop("checked"),
                                               jQuery(".donation-form #consent-phone").prop("checked"));
            }

            var amount = Bloomerang.Util.getDonationAmount() + Bloomerang.Util.getDonationTrueImpactAmount();
            if (jQuery(".donation-form #recurring").prop("checked")) {
                Bloomerang.RecurringDonation
                        .amount(amount)
                        .fundId(val(".donation-form #fund"))
                        .note(val(".donation-form #comment"))
                        .frequency(val(".donation-form #frequency") || "Monthly")
                        .startDate(val(".donation-form #start-date"))
                        .applyDonationCustomFields();

                // Need to do a null-check here because they might have a cached version of Bloomerang-v2.js
                if (Bloomerang.RecurringDonation.trueImpactEnabled && Bloomerang.RecurringDonation.trueImpactUsed) {
                  Bloomerang.RecurringDonation
                        .trueImpactEnabled(jQuery(".donation-form .true-impact .fee-amount").length > 0)
                        .trueImpactUsed(jQuery(".donation-form .true-impact input:checked").length > 0);
                }
            } else {
                Bloomerang.Donation
                        .amount(amount)
                        .fundId(val(".donation-form #fund"))
                        .note(val(".donation-form #comment"))
                        .applyDonationCustomFields();

                // Need to do a null-check here because they might have a cached version of Bloomerang-v2.js
                if (Bloomerang.Donation.trueImpactEnabled && Bloomerang.Donation.trueImpactUsed) {
                  Bloomerang.Donation
                        .trueImpactEnabled(jQuery(".donation-form .true-impact .fee-amount").length > 0)
                        .trueImpactUsed(jQuery(".donation-form .true-impact input:checked").length > 0);
                }
            }

            if (jQuery("#donation-form #Checking").is(":checked") ||
                jQuery("#donation-form #Savings").is(":checked")) {
              Bloomerang.Eft
                .accountNumber(val(".donation-form #accountNumber"))
                .routingNumber(val(".donation-form #routingNumber"))
                .type(jQuery("#donation-form .section.payment input[type='radio']:checked").attr("id"));
            }
        };
        Bloomerang.ValidateDonationFormCaptcha = function() {
            if (typeof(grecaptcha) !== "undefined" && jQuery("#captcha" + Bloomerang.Data.WidgetIds.Donation).children().length) {
                var captchaResponse = grecaptcha.getResponse(jQuery(".donation-form").data("captcha-id"));
                if (captchaResponse) {
                    jQuery(".donation-form .noCaptchaResponseError").hide();
                    Bloomerang.captchaResponse(captchaResponse);
                    return true;
                } else {
                    jQuery(".donation-form .noCaptchaResponseError").show();
                    return false;
                }
            } else return true;
        };
        Bloomerang.scrollToElement = function(element) {
            var distance = 100;
            var offset = element.offset().top;
            var offsetTop = offset > distance ? offset - distance : offset;
		        jQuery('html, body').animate({ scrollTop : offsetTop}, 500);
        };
        Bloomerang.Api.OnSuccess = Bloomerang.Widget.Donation.OnSuccess = function (response) {
            jQuery("#donation-processing-container").hide();
            var formContainer = jQuery("#donation-form-container");
            formContainer.show();
            formContainer.html(successHtml192512);
            Bloomerang.scrollToElement(formContainer);
        };
        Bloomerang.Api.OnError = Bloomerang.Widget.Donation.OnError = function (response) {
            jQuery(".btn-submit-donation").prop("disabled", false).removeClass("disabled");
            Bloomerang.Util.updateDonateButtonText();
            jQuery("#donation-form-container .errors").removeClass("hidden").html(response.Message);
            jQuery("#donation-processing-container").hide();
            jQuery("#donation-form-container").show();
            Bloomerang.scrollToElement(jQuery("#donation-form-container .errors"));
            Bloomerang.cancelFinancialSubmission(jQuery("#donation-form"));
            if (typeof(SpreedlyExpress) !== 'undefined') { 
              SpreedlyExpress.unload();
              Bloomerang.initSpreedly();
            }
            if (typeof(grecaptcha) !== "undefined" && jQuery("#captcha" + Bloomerang.Data.WidgetIds.Donation).children().length) {
              grecaptcha.reset(jQuery(".donation-form").data("captcha-id"));
            }
        };
        
        Bloomerang.Util.applyDonationCustomFields = function (obj, type) {
        
            // Clear any fields from a previous failed submission
            obj.clearCustomFields();
        
            // Apply all <input> (not multiselect), <select> and <textarea> fields
            jQuery(".donation-form .section.custom-fields :input:not(a > input, select)[id*=" + type + "]").each(function() {
                if (jQuery(this).val().hasValue()) {
                    obj.customFreeformField(jQuery(this).attr("id").toUntypedValue(), jQuery(this).val());
                }
            });
            
            // Apply all <select> fields
            jQuery(".donation-form .section.custom-fields select[id*=" + type + "]").each(function() {
                if (jQuery(this).val().hasValue()) {
                    obj.customPickField(jQuery(this).attr("id").toUntypedValue(), jQuery(this).val());
                }
            });
                
            // Apply all multiselect fields
            jQuery(".donation-form .section.custom-fields .checkboxes[id*=" + type + "]").each(function() {
                obj.customPickField(jQuery(this).attr("id").toUntypedValue(),
                jQuery.map(jQuery(this).children(".checkbox.selected"), function(v) { return jQuery(v).attr("data-id"); }));
            });
        };
        
        String.prototype.hasValue = function() {
            return (this && jQuery.trim(this)); //IE8 doesn't have a native trim function
        };
        
        Bloomerang.Account.applyDonationCustomFields = function () {
            Bloomerang.Util.applyDonationCustomFields(this, "Account");
            return this;
        };
        
        Bloomerang.Donation.applyDonationCustomFields = function () {
            Bloomerang.Util.applyDonationCustomFields(this, "Transaction");
            return this;
        };
        
        Bloomerang.RecurringDonation.applyDonationCustomFields = function () {
            Bloomerang.Util.applyDonationCustomFields(this, "Transaction");
            return this;
        };
        
        String.prototype.toUntypedValue = function() {
            return this.substring(this.indexOf('_') + 1);
        };
        
        Date.prototype.toDateInputValue = function() {
            var local = new Date(this);
            local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
            return (local.getMonth() + 1) + // Add one to the month because it starts at 0
                    "/" + local.getDate() + "/" + local.getFullYear();
        };
        
        jQuery(document).ready(function() {
            jQuery(".donation-form .field.start-date input").val(new Date().toDateInputValue());
        });
        
        // Hide recurring donation options if recurring donation box is unchecked
        jQuery(".donation-form .field.recurring").change(function() { 
            jQuery(".donation-form .field.recurring").siblings().each(function(i, e) { 
                jQuery(e).toggle();
            }); 
        })
        
        // The other-amount field is only equired when the "Other" donation-level is selected
        toggleOtherAmountRequired = function () { 
          jQuery(".donation-form #other-amount").toggleClass("required",
            jQuery(".donation-form #other-option").prop("checked"));
          Bloomerang.Util.calculateDonationTrueImpact();
        };
        jQuery(".donation-form .section.donation input[name='donation-level']").change(function() {
           toggleOtherAmountRequired();
           Bloomerang.Util.updateDonateButtonText();
         });

        if (jQuery(".donation-form .true-impact label").length) {
          jQuery(".donation-form .true-impact label")[0].innerHTML = jQuery(".donation-form .true-impact label")[0].innerHTML.replace("[amount]", "<span class='fee-amount'>$0</span>");
        }
        Bloomerang.Util.calculateDonationTrueImpact = function() {
          if (!jQuery(".donation-form .true-impact .fee-amount").length) { return; }
          // Note that we don't really care about JS floating point math. It's OK if the numbers are a couple cents off.
          var amount = Bloomerang.Util.getDonationAmount();
          var isEft = (jQuery("#donation-form #Checking").is(":checked") || jQuery("#donation-form #Savings").is(":checked"));
          var isStripeExpress = Bloomerang.Api.ProcessorType === "StripeExpress";
          var feeRate = isEft ? Bloomerang.transactionFeeRateEft : Bloomerang.transactionFeeRate;
          var newTotal = (amount + (isEft ? Bloomerang.transactionFeeEft : Bloomerang.transactionFee)) / (1 - feeRate);
          var impactAmount = isStripeExpress
            ? Number((Math.floor((newTotal - amount)*100)/100).toFixed(2))
            : Number((newTotal - amount).toFixed(2));
          jQuery(".donation-form .true-impact .fee-amount").text(accounting.formatMoney(impactAmount));
          return impactAmount;
        };
        Bloomerang.Util.getDonationTrueImpactAmount = function() {
          if (jQuery(".donation-form .true-impact input:checked").length) {
            return Bloomerang.Util.calculateDonationTrueImpact();
          }
          return 0;
        };
        
        Bloomerang.Util.updateDonateButtonText = function() {
          if (jQuery("#donation-form #Checking").is(":checked") ||
              jQuery("#donation-form #Savings").is(":checked") ||
              Bloomerang.Util.isProcessorStripe()) {
            var amount = Bloomerang.Util.getDonationAmount();
            var impactAmount = Bloomerang.Util.getDonationTrueImpactAmount();
            jQuery(".btn-submit-donation").val("Donate " + accounting.formatMoney(amount + impactAmount));
          } else {
            jQuery(".btn-submit-donation").val("Enter Payment");
          }
        };

        // Changing the value of other-amount should change the value of other-option
        jQuery(".donation-form #other-amount").change(function () { 
          jQuery(".donation-form #other-option").val(jQuery(this).val());
          Bloomerang.Util.calculateDonationTrueImpact();
          Bloomerang.Util.updateDonateButtonText();
        });
        
        jQuery(".donation-form #donation-amount").change(function() {
          Bloomerang.Util.calculateDonationTrueImpact();
          Bloomerang.Util.updateDonateButtonText();
        });
        
        // Clicking into the other-amount field should select the other-option
        jQuery(".donation-form #other-amount").click(function() { 
          jQuery(".donation-form #other-option").prop('checked',true);
          toggleOtherAmountRequired();
          Bloomerang.Util.calculateDonationTrueImpact();
        });

        jQuery.validator.addMethod("phoneUS", function(phone_number, element) {
            var digits = phone_number.replace(/\D/g, "");
            return this.optional(element) || digits.length == 7 || digits.length == 10 || digits.length == 11;
        }, "Please specify a valid phone number or use '+' for international.");

        jQuery.validator.addMethod("phoneInternational", function (phone_number, element) {
            return this.optional(element) || /^\+[0-9\-\(\)\s.]+$/i.test(phone_number);
        }, "Please specify a valid phone number.");
        jQuery.validator.classRuleSettings.phoneInternational = { phoneInternational: true };
        
        jQuery.validator.addMethod("zipcodeUS", function (value, element) {
            return this.optional(element) || /\d{5}-\d{4}$|^\d{5}$/.test(value)
        }, "The specified US ZIP Code is invalid");

        jQuery.validator.addMethod("currency", function (value, element, options) {
            return !value ||
                value
                  .replace("$", "")
                  .replace(".", "")
                  .split(",").join("")
                  .match(/^\d+$/g);
        }, "Not a valid currency");

        jQuery.validator.classRuleSettings.currency = { currency: true };
        
        // Validate the other amount, but only if they selected it
        jQuery.validator.addMethod("otherAmount", function(value, element, param) {
          if (jQuery(".donation-form #other-option").prop("checked")) {
            return jQuery.validator.methods.min.bind(this)(value, element, 1) &&
              jQuery.validator.methods.currency(value, element);
          }
          return true;
        }, "Invalid amount");
        
        jQuery.validator.classRuleSettings.otherAmount = { otherAmount: true };

        jQuery.validator.addMethod("number", function (value, element, options) {
          return !value ||
              value
                .replace(".", "")
                .split(",").join("")
                .match(/^\d+$/g);
        }, "Not a valid number");

        jQuery.validator.classRuleSettings.number = { number: true };
        
        jQuery.validator.addMethod("validYear", function (value, element, options) {
            try {
                return (!value || value.match(/^[1-9]\d\d\d$/)) ? true : false;
            }
            catch (e) {
                return false;
            }
        }, function () { return "Must be a 4 digit year"; });

        jQuery.validator.classRuleSettings.validYear = { validYear: true };
        
        // Validate that the donation amount is at least $1
        jQuery.validator.methods.min = function( value, element, param ) {
          if (typeof (accounting) === "undefined") { // rip out $ and ,
              value = ((value + "") || "").replace(/[\$,]/g, "");
          }
          else { // Use accounting.parse, to handle $ and ,
              value = accounting.parse(value);
          }
          return this.optional( element ) || value >= param;
        };
        jQuery.validator.classRuleSettings.minimum1 = { min: 1 };
        jQuery.validator.messages.min = 'Please enter a value of at least {0}.'

        jQuery(".donation-form #country").change(function(event) {
          var element = jQuery(event.target || event.srcElement); // cross-browser event target selection
          var isInternational = (element.val() != "US" && element.val() != "CA" && element.val() != "BM");
          // TODO: Remove this when we have figured out the canada state/province issue
          Bloomerang.Util.addLog("Pre country change: Country=" + element.val() + ", State=" + jQuery(".donation-form #state").val() + ", Province=" + jQuery(".donation-form #province").val() + ", City=" + jQuery(".donation-form #city").val());
          jQuery(".donation-form #state, .donation-form #province").val(""); // clear the state when the country changes
          jQuery(".donation-form .field.city, .donation-form .field.state, .donation-form .field.province, .donation-form .field.zip-code, .donation-form .field.postal-code").toggle(!isInternational);
          jQuery(".donation-form #street-address").toggleClass("international", isInternational);
          if (element.val() == "BM") {
            jQuery(".donation-form .field.city .label").text(jQuery(".donation-form .field.city input").data("bm-label"));
          } else if (element.val() == "US" || element.val() == "CA") {
            jQuery(".donation-form .field.city .label").text(jQuery(".donation-form .field.city input").data("us-label"));
          }
          if (element.val() == "US") {
            jQuery(".donation-form .field.state, .donation-form .field.zip-code").show();
            jQuery(".donation-form .field.province, .donation-form .field.postal-code").hide();
          } else if (element.val() == "CA") {
            jQuery(".donation-form .field.state, .donation-form .field.zip-code").hide();
            jQuery(".donation-form .field.province, .donation-form .field.postal-code").show();
          } else if (element.val() == "BM") {
            jQuery(".donation-form .field.state, .donation-form .field.province, .donation-form .field.zip-code").hide();
            jQuery(".donation-form .field.postal-code").show();
          } else {
            jQuery(".donation-form #city, .donation-form #postal-code, .donation-form #zip-code").val("");
          }
          jQuery(".donation-form .section.consent").toggleClass("hidden", !Bloomerang.Util.isCountryInEurope(element.val()));
          // TODO: Remove this when we have figured out the canada state/province issue
          Bloomerang.Util.addLog("Post country change: Country=" + element.val() + ", State=" + jQuery(".donation-form #state").val() + ", Province=" + jQuery(".donation-form #province").val()+ ", City=" + jQuery(".donation-form #city").val());
        });

        // TODO: Remove this when we have figured out the canada state/province issue
        // We use the focusin function to save the previous value so we can log out the previous and new values on change
        // https://stackoverflow.com/questions/29118178/input-jquery-get-old-value-before-onchange-and-get-value-after-on-change/29118530
        jQuery(".donation-form #state").focusin(function(e) {
          var element = jQuery(e.target || e.srcElement); // cross-browser event target selection
          element.data('val', element.val());
        });

        // TODO: Remove this when we have figured out the canada state/province issue
        jQuery(".donation-form #state").change(function(e) {
          var element = jQuery(e.target || e.srcElement); // cross-browser event target selection
          var prev = element.data('val');
          var current = element.val();
          var provinceElement = jQuery(".donation-form #province");
          var prevProvince = provinceElement.data('val');
          var currentProvince = provinceElement.val();
          Bloomerang.Util.addLog("State Changed: Target=" + e.target.name + ", PreValue=" + prev + ", Value=" + current + ", Province PreValue =" + prevProvince + ", Province CurrentValue =" + currentProvince);
        });

        // TODO: Remove this when we have figured out the canada state/province issue
        // We use the focusin function to save the previous value so we can log out the previous and new values on change
        // https://stackoverflow.com/questions/29118178/input-jquery-get-old-value-before-onchange-and-get-value-after-on-change/29118530
        jQuery(".donation-form #province").focusin(function(e) {
          var element = jQuery(e.target || e.srcElement); // cross-browser event target selection
          element.data('val', element.val());
        });

        // TODO: Remove this when we have figured out the canada state/province issue
        jQuery(".donation-form #province").change(function(e) {
          var element = jQuery(e.target || e.srcElement); // cross-browser event target selection
          var prev = element.data('val');
          var current = element.val();
          var stateElement = jQuery(".donation-form #state");
          var prevState = stateElement.data('val');
          var currentState = stateElement.val();
          Bloomerang.Util.addLog("Province Changed: Target=" + e.target.name + ", PreValue=" + prev + ", Value=" + current + ", State PrevValue=" + prevState + ", State Current=" + currentState);
        });

        // TODO: Remove this when we have figured out the canada state/province issue
        // We use the focusin function to save the previous value so we can log out the previous and new values on change
        // https://stackoverflow.com/questions/29118178/input-jquery-get-old-value-before-onchange-and-get-value-after-on-change/29118530
        jQuery(".donation-form #city").focusin(function(e) {
          var element = jQuery(e.target || e.srcElement); // cross-browser event target selection
          element.data('val', element.val());
        });

        // TODO: Remove this when we have figured out the canada state/province issue
        jQuery(".donation-form #city").change(function(e) {
          var element = jQuery(e.target || e.srcElement); // cross-browser event target selection
          var prev = element.data('val');
          var current = element.val();
          Bloomerang.Util.addLog("City Changed: Target=" + e.target.name + ", PreValue=" + prev + ", Value=" + current);
        });

        jQuery(".donation-form #phone-number").change(function () {
          var phoneField = jQuery(".donation-form #phone-number");
          var internationalNumber = phoneField.val().substring(0,1) === '+';
          phoneField.toggleClass("phoneUS", !internationalNumber);
          phoneField.toggleClass("phoneInternational", internationalNumber);
        })

        collectPayment = function () {
          var form = jQuery("#donation-form");

          if (!Bloomerang.ValidateDonationFormCaptcha()) {
            return false;
          }
  
          if (!form.valid()) {
            return false;
          }
          
          var isEft = jQuery("#donation-form #CreditCard").length > 0 && !jQuery("#donation-form #CreditCard").prop("checked");
          
          if (Bloomerang.Util.isProcessorStripe() && !isEft && !Bloomerang.Util.StripeCardIsValid) {
            document.getElementById('card-errors').textContent = "Valid card info is required";
            return false;
          }
  
          if (isEft) {
            submitDonation();
          }
          else {
            var val = function (selector) { return jQuery(selector).val(); };
            var amount = Bloomerang.Util.getDonationAmount() + Bloomerang.Util.getDonationTrueImpactAmount();
            var selectedDonationLevel = jQuery(".donation-form .section.donation input[name='donation-level']:checked").parent().text();
            selectedDonationLevel = (selectedDonationLevel.indexOf("-") == -1 ? "" : selectedDonationLevel.substr(selectedDonationLevel.indexOf("-") + 2) );

            var oldMeta = '';
            if (jQuery('meta[name="viewport"]').length) {
              oldMeta = jQuery('meta[name="viewport"]').attr('content');
            } else {
              jQuery('head').append('<meta name="viewport" content="" />');
            }
            jQuery('meta[name="viewport"]').attr('content', 'width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1');
            jQuery('meta[name="viewport"]').attr('content', oldMeta);

            if (Bloomerang.Util.isProcessorStripe()) {
              submitDonation();
            } else {
              SpreedlyExpress.setDisplayOptions({
                "amount": accounting.formatMoney(amount),
                "full_name": val(".donation-form #first-name") + " " + val(".donation-form #last-name"),
                "sidebar_bottom_description": selectedDonationLevel,
                "submit_label": "Donate"});
              SpreedlyExpress.setPaymentMethodParams({
                "email": val(".donation-form #email-address"),
                "phone_number": val(".donation-form #phone-number"),
                "address1": val(".donation-form #street-address"),
                "city": val(".donation-form #city"),
                "state": val(".donation-form #state") || val(".donation-form #province"),
                "zip": val(".donation-form #zip-code") || val(".donation-form #postal-code"),
                "country": val(".donation-form #country")});

              SpreedlyExpress.onPaymentMethod(function(token, paymentMethod) {
                Bloomerang.CreditCard.spreedlyToken(token);
	              submitDonation();
	            });

              SpreedlyExpress.openView();
            }
          }
        };

        submitDonation = function() {
          if (!Bloomerang.continueFinancialSubmission(jQuery("#donation-form"))) { return false; }
  
          Bloomerang.Api.OnSubmit = Bloomerang.Widget.Donation.OnSubmit;
          Bloomerang.Api.OnSuccess = Bloomerang.Widget.Donation.OnSuccess;
          Bloomerang.Api.OnError = Bloomerang.Widget.Donation.OnError;

          var processingMessage = jQuery("#donation-processing-container");
          processingMessage.show();
          jQuery("#donation-form-container").hide();
          Bloomerang.scrollToElement(processingMessage);
  
          var tmp = jQuery(".donation-form #recurring").prop("checked")
            ? Bloomerang.Api.recurringDonate()
            : Bloomerang.Api.donate();
        };
        
        jQuery("#donation-form #CreditCard").prop("checked", true);
        jQuery("#donation-form .section.payment input[type='radio']").click(function() {
          Bloomerang.Util.calculateDonationTrueImpact();
          Bloomerang.Util.updateDonateButtonText();
          if (jQuery(this).attr("id") == "CreditCard") {
            jQuery("#donation-form .accountNumber, \
                    #donation-form .routingNumber, \
                    #donation-form .sample-check").hide();
            jQuery("#stripe-cc-fields").show();
            
          }                        
          else {                   
            jQuery("#donation-form .accountNumber, \
                    #donation-form .routingNumber, \
                    #donation-form .sample-check").show();
            jQuery("#stripe-cc-fields").hide();
            if (jQuery("#donation-form .sample-check").length == 0) {                    
              var checkImage = new Image();
              checkImage.src = 'https://s3-us-west-2.amazonaws.com/bloomerang-public-cdn/public-gallery/SampleCheck.png';
              jQuery(checkImage).addClass("sample-check");
              jQuery("#donation-form .accountNumber").after(checkImage);
            }
          }
          
      });
      
      jQuery("#donation-form #true-impact").change(function() {
        Bloomerang.Util.updateDonateButtonText();
      });

      // Show opt-in options based on the setting of the global opt-in
      jQuery(".donation-form .field.consent-all").change(function() { 
          jQuery(".donation-form .field.consent-all").siblings().each(function(i, e) { 
              jQuery(e).toggle();
          }); 
      });
        
})(jQuery);
    };
    
                var startBloomerangLoad = function() {
                    if (window.bloomerangLoadStarted == undefined) {
                        window.bloomerangLoadStarted = true;
                        var script = document.createElement('script');
                        script.type = 'text/javascript';
                        script.src = 'https://crm.bloomerang.co/Content/Scripts/Api/Bloomerang-v2.js?nocache=2022-02-09';
                        document.getElementsByTagName('head')[0].appendChild(script);
                        waitForBloomerangLoad(function() { Bloomerang.Util.requireJQueryValidationAndStripe(function() { insertForm192512(); })});
                    }
                    else {
                        waitForBloomerangLoad(function() { Bloomerang.Util.requireJQueryValidationAndStripe(function() { insertForm192512(); })});
                    }
                };

                var waitForBloomerangLoad = function(callback) {
                    if (typeof(Bloomerang) === 'undefined' || !Bloomerang._isReady) {
                        setTimeout(function () { waitForBloomerangLoad(callback) }, 500);
                    }
                    else {
                        if (true) {
                            callback();
                        } else {
                            window.bloomerangLoadStarted = undefined;
                            Bloomerang = undefined; // The version of Blomerang.js is not what we want. So blow it away and reload.
                            startBloomerangLoad();
                        }
                    }
                };

                startBloomerangLoad();
</script></pre>
